//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInputControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputControls"",
    ""maps"": [
        {
            ""name"": ""Agent"",
            ""id"": ""26410599-a52f-4f76-a72b-6d03c1d79c6d"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""7f6f3846-0baf-47e8-8f1a-5f29861060a3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""be6c4c81-5ed1-486d-b3f5-11b969cf4f4f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2(invertX=false)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Run"",
                    ""type"": ""Button"",
                    ""id"": ""7c0ee7b2-ef54-49de-8795-4199a0665c82"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch (Toggle)"",
                    ""type"": ""Button"",
                    ""id"": ""cb8f1b30-8a63-4045-ac3b-bf93a11b5bad"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""436fa167-48ff-4440-a945-4cf00fc7aa31"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""8a123274-b5b2-4837-83e2-3a57b864a538"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""ce95bac7-5cb6-463f-ad33-ee5a0734669b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""1e31566a-a156-4b31-906c-b644a71a727c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""c1b60604-4cea-4968-8dae-329f0a18a0bb"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""05ec593a-4629-40ce-8c07-1c63da80e684"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""b1378043-00ca-4da9-aa61-c98b0a09182f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""537a3673-eaae-44de-aaf7-7f3ff67ba039"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0d91339e-490a-4b15-a0eb-40e85b1f0096"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""37a47e3d-e34e-48c8-a8e0-731c1df1ff14"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Run"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""900f2d74-a375-41fc-b8e1-1860d842e27d"",
                    ""path"": ""<Keyboard>/leftCtrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch (Toggle)"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1e74abc6-1f6c-472c-8588-fac714eca80b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ec1c5b31-b865-4602-8f20-8f8183ad6888"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2b168933-0531-4474-b285-456b2dbd8231"",
                    ""path"": ""<Pointer>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c2679d9-97c4-4293-bce8-f7a83347f232"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7c4be50e-9d06-4e2f-b431-d173bea3575f"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Operator"",
            ""id"": ""08b0315d-9658-4a85-b2ad-55699a5e6066"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8a18c866-cd55-4c16-9ae9-b9cccae1df5a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""e9cf7717-c410-46e4-abe9-621c3c82c3ec"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Elevate"",
                    ""type"": ""Value"",
                    ""id"": ""49b3b9a9-3481-437f-9eb1-4a3d303faaf2"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""4263f393-52fa-4e1a-bcb6-ddd51df25346"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""EQ"",
                    ""id"": ""0c01f278-06a5-4ed2-9846-810ce03f01e3"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""006e12ac-6a1a-43ae-a6fb-c74d922298fc"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""d3263b6c-0c00-456d-b259-28a24f164740"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Space/Shift"",
                    ""id"": ""cdcaaede-fe6c-4c55-ac3f-a04f1f73b308"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""e2473443-c82e-4fac-a838-7014e1e03ba9"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""22f97436-2df8-46d3-9145-5b8d883f9c6f"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Elevate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""d7db9b62-140c-46a9-b5d7-7f14e83ccce0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""1c897a98-31f8-43f7-962e-bcebdb882007"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""bf05317a-b5c4-4b3f-a592-a78e8591d8b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""f2984e51-ca6d-4fb2-b425-44d85e92284b"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""c066b4e4-fd3b-4a2b-8dbe-3c328a4d1034"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""a4bf4eba-1c71-47c9-ae98-d48521658246"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Agent
        m_Agent = asset.FindActionMap("Agent", throwIfNotFound: true);
        m_Agent_Movement = m_Agent.FindAction("Movement", throwIfNotFound: true);
        m_Agent_Look = m_Agent.FindAction("Look", throwIfNotFound: true);
        m_Agent_Run = m_Agent.FindAction("Run", throwIfNotFound: true);
        m_Agent_CrouchToggle = m_Agent.FindAction("Crouch (Toggle)", throwIfNotFound: true);
        m_Agent_Interact = m_Agent.FindAction("Interact", throwIfNotFound: true);
        m_Agent_Aim = m_Agent.FindAction("Aim", throwIfNotFound: true);
        m_Agent_Shoot = m_Agent.FindAction("Shoot", throwIfNotFound: true);
        m_Agent_Escape = m_Agent.FindAction("Escape", throwIfNotFound: true);
        // Operator
        m_Operator = asset.FindActionMap("Operator", throwIfNotFound: true);
        m_Operator_Movement = m_Operator.FindAction("Movement", throwIfNotFound: true);
        m_Operator_Rotate = m_Operator.FindAction("Rotate", throwIfNotFound: true);
        m_Operator_Elevate = m_Operator.FindAction("Elevate", throwIfNotFound: true);
        m_Operator_Escape = m_Operator.FindAction("Escape", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Agent
    private readonly InputActionMap m_Agent;
    private List<IAgentActions> m_AgentActionsCallbackInterfaces = new List<IAgentActions>();
    private readonly InputAction m_Agent_Movement;
    private readonly InputAction m_Agent_Look;
    private readonly InputAction m_Agent_Run;
    private readonly InputAction m_Agent_CrouchToggle;
    private readonly InputAction m_Agent_Interact;
    private readonly InputAction m_Agent_Aim;
    private readonly InputAction m_Agent_Shoot;
    private readonly InputAction m_Agent_Escape;
    public struct AgentActions
    {
        private @PlayerInputControls m_Wrapper;
        public AgentActions(@PlayerInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Agent_Movement;
        public InputAction @Look => m_Wrapper.m_Agent_Look;
        public InputAction @Run => m_Wrapper.m_Agent_Run;
        public InputAction @CrouchToggle => m_Wrapper.m_Agent_CrouchToggle;
        public InputAction @Interact => m_Wrapper.m_Agent_Interact;
        public InputAction @Aim => m_Wrapper.m_Agent_Aim;
        public InputAction @Shoot => m_Wrapper.m_Agent_Shoot;
        public InputAction @Escape => m_Wrapper.m_Agent_Escape;
        public InputActionMap Get() { return m_Wrapper.m_Agent; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(AgentActions set) { return set.Get(); }
        public void AddCallbacks(IAgentActions instance)
        {
            if (instance == null || m_Wrapper.m_AgentActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_AgentActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Look.started += instance.OnLook;
            @Look.performed += instance.OnLook;
            @Look.canceled += instance.OnLook;
            @Run.started += instance.OnRun;
            @Run.performed += instance.OnRun;
            @Run.canceled += instance.OnRun;
            @CrouchToggle.started += instance.OnCrouchToggle;
            @CrouchToggle.performed += instance.OnCrouchToggle;
            @CrouchToggle.canceled += instance.OnCrouchToggle;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IAgentActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Look.started -= instance.OnLook;
            @Look.performed -= instance.OnLook;
            @Look.canceled -= instance.OnLook;
            @Run.started -= instance.OnRun;
            @Run.performed -= instance.OnRun;
            @Run.canceled -= instance.OnRun;
            @CrouchToggle.started -= instance.OnCrouchToggle;
            @CrouchToggle.performed -= instance.OnCrouchToggle;
            @CrouchToggle.canceled -= instance.OnCrouchToggle;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IAgentActions instance)
        {
            if (m_Wrapper.m_AgentActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IAgentActions instance)
        {
            foreach (var item in m_Wrapper.m_AgentActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_AgentActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public AgentActions @Agent => new AgentActions(this);

    // Operator
    private readonly InputActionMap m_Operator;
    private List<IOperatorActions> m_OperatorActionsCallbackInterfaces = new List<IOperatorActions>();
    private readonly InputAction m_Operator_Movement;
    private readonly InputAction m_Operator_Rotate;
    private readonly InputAction m_Operator_Elevate;
    private readonly InputAction m_Operator_Escape;
    public struct OperatorActions
    {
        private @PlayerInputControls m_Wrapper;
        public OperatorActions(@PlayerInputControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Operator_Movement;
        public InputAction @Rotate => m_Wrapper.m_Operator_Rotate;
        public InputAction @Elevate => m_Wrapper.m_Operator_Elevate;
        public InputAction @Escape => m_Wrapper.m_Operator_Escape;
        public InputActionMap Get() { return m_Wrapper.m_Operator; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OperatorActions set) { return set.Get(); }
        public void AddCallbacks(IOperatorActions instance)
        {
            if (instance == null || m_Wrapper.m_OperatorActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OperatorActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Rotate.started += instance.OnRotate;
            @Rotate.performed += instance.OnRotate;
            @Rotate.canceled += instance.OnRotate;
            @Elevate.started += instance.OnElevate;
            @Elevate.performed += instance.OnElevate;
            @Elevate.canceled += instance.OnElevate;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
        }

        private void UnregisterCallbacks(IOperatorActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Rotate.started -= instance.OnRotate;
            @Rotate.performed -= instance.OnRotate;
            @Rotate.canceled -= instance.OnRotate;
            @Elevate.started -= instance.OnElevate;
            @Elevate.performed -= instance.OnElevate;
            @Elevate.canceled -= instance.OnElevate;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
        }

        public void RemoveCallbacks(IOperatorActions instance)
        {
            if (m_Wrapper.m_OperatorActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOperatorActions instance)
        {
            foreach (var item in m_Wrapper.m_OperatorActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OperatorActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OperatorActions @Operator => new OperatorActions(this);
    public interface IAgentActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnRun(InputAction.CallbackContext context);
        void OnCrouchToggle(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
    public interface IOperatorActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnElevate(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
    }
}
